# -*- coding: utf-8 -*-
"""A*.Alg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yg37fUZ0SrI-0Oh1aqPBajj7IqgajqnE
"""

import heapq  # Import heapq to use a priority queue (min-heap)

# Weighted graph: each node maps to a dict of neighbors and edge costs (distances in km)
graph = {
    "Lahore": {"Islamabad": 280, "Faisalabad": 160},
    "Islamabad": {"Lahore": 280, "Peshawar": 170, "Multan": 400},
    "Faisalabad": {"Lahore": 160, "Multan": 250},
    "Multan": {"Faisalabad": 250, "Islamabad": 400, "Karachi": 870},
    "Peshawar": {"Islamabad": 170},
    "Karachi": {"Multan": 870}
}

# Heuristic (straight-line estimated distance to Karachi) â€“ must not overestimate
heuristic = {
    "Lahore": 1200,
    "Islamabad": 1000,
    "Faisalabad": 950,
    "Multan": 800,
    "Peshawar": 1250,
    "Karachi": 0
}

def a_star(graph, start, goal, heuristic):
    """
    A* search returns (path, total_cost) or (None, inf) if no path found.
    """
    open_list = []
    heapq.heappush(open_list, (heuristic[start], [start]))
    g_costs = {start: 0}
    closed_set = set()

    while open_list:
        f, path = heapq.heappop(open_list)
        node = path[-1]

        if node == goal:
            return path, g_costs[node]

        if node in closed_set:
            continue

        closed_set.add(node)

        for neighbor, cost in graph[node].items():
            tentative_g = g_costs[node] + cost
            if neighbor not in g_costs or tentative_g < g_costs[neighbor]:
                g_costs[neighbor] = tentative_g
                f_cost = tentative_g + heuristic.get(neighbor, float('inf'))
                new_path = path + [neighbor]
                heapq.heappush(open_list, (f_cost, new_path))

    return None, float('inf')


if __name__ == "__main__":
    # Take start and goal city from user
    print("Available cities:", list(graph.keys()))
    start_city = input("Enter start city: ").strip()
    goal_city = input("Enter goal city: ").strip()

    if start_city not in graph or goal_city not in graph:
        print("Error: Invalid city name.")
    else:
        path, cost = a_star(graph, start_city, goal_city, heuristic)
        if path:
            print("\nA* Path:", " -> ".join(path))
            print("Total Cost:", cost, "km")
        else:
            print("No path found between", start_city, "and", goal_city)